# Задание по теме "Интроспекция"

# Создаем функцию, которая принимает объект (любого типа) в качестве аргумента и проводит интроспекцию этого объекта,
# чтобы определить его тип, атрибуты, методы, модуль, и другие свойства
def introspection_info(obj):
    # Определяем тип объекта. Используем встроенную функцию type(obj). В результате получим:  <class '____'>,
    # но чтобы вывести только одно название, берём имя класса через .__name__, для представления строкового
    # представления типа объекта ( 'int' или 'list')
    obj_type = type(obj).__name__

    # Определяем атрибуты объекта. Используем функцию dir(obj). Она возвращает список всех атрибутов и методов объекта
    attributes = [attr for attr in dir(obj)

                  # Отбираем только атрибуты, которые не являются вызываемыми (не функции или методы)
                  if not callable(getattr(obj, attr))]

    # Определяем методы объекта. Используем функцию dir(obj) для получения всех атрибутов, но отбираем только
    # вызываемые атрибуты (методы объекта)
    methods = [method for method in dir(obj)
               if callable(getattr(obj, method))]

    # Определяем модуль, к которому принадлежит объект
    module = obj.__class__.__module__

    # Определяем другие интересные свойства объекта, учитывая его тип
    add_info = {}

    # Для списков, кортежей, множеств и словарей: вычисляем длину объекта len(obj) и сохраняем её в ключ length
    if isinstance(obj, (list, tuple, set, dict)):
        add_info['длина'] = len(obj)

    # Для целых чисел (int): проверяем, является ли число чётным, результатом будет True или False
    elif isinstance(obj, int):
        add_info['Четное'] = obj % 2 == 0

    # Для чисел с плавающей запятой (float): проверяем, является ли число целым
    elif isinstance(obj, float):
        add_info['Целое'] = obj.is_integer()

    # Возвращаем результат в виде словаря
    return {
        'type': obj_type,
        'attributes': attributes,
        'methods': methods,
        'module': module,
        'add_info': add_info
    }


# Пример использования:
number_info = introspection_info(42)
print(number_info)
